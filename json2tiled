#!/usr/bin/env python3
#
# Â© Reuben Thomas <rrt@sc3d.org> 2024
# Released under the GPL version 3, or (at your option) any later version.

# /// script
# requires-python = ">=3.9"
# ///

import argparse
import json
from pathlib import Path

import tmxlib as tmx


# Command-line arguments
parser = argparse.ArgumentParser(
    description="Convert JSON Sokoban level packs to Tiled .tmx format.",
)
parser.add_argument(
    "sokoban_file", metavar="SOKOBAN-LEVELS", help="JSON Sokoban levels file"
)
parser.add_argument(
    "tiled_directory", metavar="DIRECTORY", help="directory in which to put Tiled files"
)
args = parser.parse_args()


# Read the input
with open(args.sokoban_file, encoding="utf-8") as fh:
    json_levels = json.load(fh)


# Convert tile encoding
def convert(row: list[str]) -> list[int]:
    char_to_num = {
        " ": 1,
        "'": 2,
        "#": 3,
        "$": 4,
        ".": 5,
        "*": 6,
        "+": 7,
        "@": 8,
    }
    return list(map(lambda c: char_to_num[c], row))

levels = []
map_width = []
map_height = []
for json_level in json_levels:
    map_height.append(len(json_level))
    map_width.append(len(json_level[0]))
    levels.append([])
    for line in json_level:
        assert(len(line) == map_width[-1])
        levels[-1] += convert(list(line))

# Construct the output maps and save them
tilesize = 96
for i, level in enumerate(levels):
    tilemap = tmx.Map((map_width[i], map_height[i]), (tilesize, tilesize))
    tilemap.properties["Title"] = str(i)
    tilemap.tilesets = [  # pyright: ignore
        tmx.ImageTileset("Sokoban", (tilesize, tilesize), 1, source="Sokoban.tsx")
    ]
    tilemap.layers = [tmx.layer.TileLayer(tilemap, "Tile Layer 1", data=level)]  # pyright: ignore
    tilemap.save(
        Path(args.tiled_directory) / f"{str(i + 1).zfill(2)}.tmx"
    )
